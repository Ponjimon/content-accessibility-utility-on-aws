"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const handler = async (event, context) => {
    try {
        const jobId = event.jobId || 'unknown';
        const outputBucket = event.outputS3Bucket;
        const outputPrefix = event.outputS3Prefix || 'converted/';
        // Construct the expected output path
        const jobOutputPrefix = `${outputPrefix}${jobId}/`;
        console.log(`Checking status for job ${jobId} in ${outputBucket}/${jobOutputPrefix}`);
        // Initialize S3 client
        const s3Client = new client_s3_1.S3Client({});
        // List objects in the job output location
        const listCommand = new client_s3_1.ListObjectsV2Command({
            Bucket: outputBucket,
            Prefix: jobOutputPrefix
        });
        const response = await s3Client.send(listCommand);
        let filesFound = [];
        let status = 'IN_PROGRESS';
        if (response.Contents && response.Contents.length > 0) {
            filesFound = response.Contents
                .map(obj => obj.Key?.replace(jobOutputPrefix, '') || '')
                .filter(key => key.length > 0);
            // Check if we have the expected output files
            const htmlFiles = filesFound.filter(f => f.endsWith('.html'));
            if (htmlFiles.length > 0) {
                status = 'COMPLETED';
                console.log(`Job ${jobId} completed - found ${htmlFiles.length} HTML files`);
            }
            else {
                status = 'IN_PROGRESS';
                console.log(`Job ${jobId} in progress - found ${filesFound.length} files but no HTML yet`);
            }
        }
        else {
            status = 'IN_PROGRESS';
            console.log(`Job ${jobId} in progress - no output files found yet`);
        }
        // Return status response
        return {
            jobId,
            status,
            outputLocation: `s3://${outputBucket}/${jobOutputPrefix}`,
            filesFound
        };
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        const jobId = event.jobId || 'unknown';
        console.log(`Error checking status for job ${jobId}: ${errorMessage}`);
        // Return error response
        return {
            jobId,
            status: 'FAILED',
            error: errorMessage,
            outputLocation: `s3://${event.outputS3Bucket}/${event.outputS3Prefix || 'converted/'}${jobId}/`
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLWNoZWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGF0dXMtY2hlY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxrREFBb0U7QUFpQjdELE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUF5QixFQUFFLE9BQWdCLEVBQWtDLEVBQUU7SUFDM0csSUFBSSxDQUFDO1FBQ0gsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUM7UUFDdkMsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztRQUMxQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsY0FBYyxJQUFJLFlBQVksQ0FBQztRQUUxRCxxQ0FBcUM7UUFDckMsTUFBTSxlQUFlLEdBQUcsR0FBRyxZQUFZLEdBQUcsS0FBSyxHQUFHLENBQUM7UUFFbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsS0FBSyxPQUFPLFlBQVksSUFBSSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBRXRGLHVCQUF1QjtRQUN2QixNQUFNLFFBQVEsR0FBRyxJQUFJLG9CQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEMsMENBQTBDO1FBQzFDLE1BQU0sV0FBVyxHQUFHLElBQUksZ0NBQW9CLENBQUM7WUFDM0MsTUFBTSxFQUFFLFlBQVk7WUFDcEIsTUFBTSxFQUFFLGVBQWU7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWxELElBQUksVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUM5QixJQUFJLE1BQU0sR0FBZ0MsYUFBYSxDQUFDO1FBRXhELElBQUksUUFBUSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN0RCxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVE7aUJBQzNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQ3ZELE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFakMsNkNBQTZDO1lBQzdDLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFFOUQsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUN6QixNQUFNLEdBQUcsV0FBVyxDQUFDO2dCQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sS0FBSyxzQkFBc0IsU0FBUyxDQUFDLE1BQU0sYUFBYSxDQUFDLENBQUM7WUFDL0UsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE1BQU0sR0FBRyxhQUFhLENBQUM7Z0JBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxLQUFLLHdCQUF3QixVQUFVLENBQUMsTUFBTSx3QkFBd0IsQ0FBQyxDQUFDO1lBQzdGLENBQUM7UUFDSCxDQUFDO2FBQU0sQ0FBQztZQUNOLE1BQU0sR0FBRyxhQUFhLENBQUM7WUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEtBQUssMENBQTBDLENBQUMsQ0FBQztRQUN0RSxDQUFDO1FBRUQseUJBQXlCO1FBQ3pCLE9BQU87WUFDTCxLQUFLO1lBQ0wsTUFBTTtZQUNOLGNBQWMsRUFBRSxRQUFRLFlBQVksSUFBSSxlQUFlLEVBQUU7WUFDekQsVUFBVTtTQUNYLENBQUM7SUFFSixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE1BQU0sWUFBWSxHQUFHLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQztRQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxLQUFLLEtBQUssWUFBWSxFQUFFLENBQUMsQ0FBQztRQUV2RSx3QkFBd0I7UUFDeEIsT0FBTztZQUNMLEtBQUs7WUFDTCxNQUFNLEVBQUUsUUFBUTtZQUNoQixLQUFLLEVBQUUsWUFBWTtZQUNuQixjQUFjLEVBQUUsUUFBUSxLQUFLLENBQUMsY0FBYyxJQUFJLEtBQUssQ0FBQyxjQUFjLElBQUksWUFBWSxHQUFHLEtBQUssR0FBRztTQUNoRyxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQWxFVyxRQUFBLE9BQU8sV0FrRWxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUzNDbGllbnQsIExpc3RPYmplY3RzVjJDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXMzJztcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICdhd3MtbGFtYmRhJztcblxuaW50ZXJmYWNlIFN0YXR1c0NoZWNrZXJFdmVudCB7XG4gIGpvYklkPzogc3RyaW5nO1xuICBvdXRwdXRTM0J1Y2tldDogc3RyaW5nO1xuICBvdXRwdXRTM1ByZWZpeD86IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFN0YXR1c0NoZWNrZXJSZXNwb25zZSB7XG4gIGpvYklkOiBzdHJpbmc7XG4gIHN0YXR1czogJ0NPTVBMRVRFRCcgfCAnSU5fUFJPR1JFU1MnIHwgJ0ZBSUxFRCc7XG4gIG91dHB1dExvY2F0aW9uOiBzdHJpbmc7XG4gIGZpbGVzRm91bmQ/OiBzdHJpbmdbXTtcbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBTdGF0dXNDaGVja2VyRXZlbnQsIGNvbnRleHQ6IENvbnRleHQpOiBQcm9taXNlPFN0YXR1c0NoZWNrZXJSZXNwb25zZT4gPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGpvYklkID0gZXZlbnQuam9iSWQgfHwgJ3Vua25vd24nO1xuICAgIGNvbnN0IG91dHB1dEJ1Y2tldCA9IGV2ZW50Lm91dHB1dFMzQnVja2V0O1xuICAgIGNvbnN0IG91dHB1dFByZWZpeCA9IGV2ZW50Lm91dHB1dFMzUHJlZml4IHx8ICdjb252ZXJ0ZWQvJztcbiAgICBcbiAgICAvLyBDb25zdHJ1Y3QgdGhlIGV4cGVjdGVkIG91dHB1dCBwYXRoXG4gICAgY29uc3Qgam9iT3V0cHV0UHJlZml4ID0gYCR7b3V0cHV0UHJlZml4fSR7am9iSWR9L2A7XG4gICAgXG4gICAgY29uc29sZS5sb2coYENoZWNraW5nIHN0YXR1cyBmb3Igam9iICR7am9iSWR9IGluICR7b3V0cHV0QnVja2V0fS8ke2pvYk91dHB1dFByZWZpeH1gKTtcbiAgICBcbiAgICAvLyBJbml0aWFsaXplIFMzIGNsaWVudFxuICAgIGNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KHt9KTtcbiAgICBcbiAgICAvLyBMaXN0IG9iamVjdHMgaW4gdGhlIGpvYiBvdXRwdXQgbG9jYXRpb25cbiAgICBjb25zdCBsaXN0Q29tbWFuZCA9IG5ldyBMaXN0T2JqZWN0c1YyQ29tbWFuZCh7XG4gICAgICBCdWNrZXQ6IG91dHB1dEJ1Y2tldCxcbiAgICAgIFByZWZpeDogam9iT3V0cHV0UHJlZml4XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzM0NsaWVudC5zZW5kKGxpc3RDb21tYW5kKTtcbiAgICBcbiAgICBsZXQgZmlsZXNGb3VuZDogc3RyaW5nW10gPSBbXTtcbiAgICBsZXQgc3RhdHVzOiAnQ09NUExFVEVEJyB8ICdJTl9QUk9HUkVTUycgPSAnSU5fUFJPR1JFU1MnO1xuICAgIFxuICAgIGlmIChyZXNwb25zZS5Db250ZW50cyAmJiByZXNwb25zZS5Db250ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBmaWxlc0ZvdW5kID0gcmVzcG9uc2UuQ29udGVudHNcbiAgICAgICAgLm1hcChvYmogPT4gb2JqLktleT8ucmVwbGFjZShqb2JPdXRwdXRQcmVmaXgsICcnKSB8fCAnJylcbiAgICAgICAgLmZpbHRlcihrZXkgPT4ga2V5Lmxlbmd0aCA+IDApO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIHRoZSBleHBlY3RlZCBvdXRwdXQgZmlsZXNcbiAgICAgIGNvbnN0IGh0bWxGaWxlcyA9IGZpbGVzRm91bmQuZmlsdGVyKGYgPT4gZi5lbmRzV2l0aCgnLmh0bWwnKSk7XG4gICAgICBcbiAgICAgIGlmIChodG1sRmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBzdGF0dXMgPSAnQ09NUExFVEVEJztcbiAgICAgICAgY29uc29sZS5sb2coYEpvYiAke2pvYklkfSBjb21wbGV0ZWQgLSBmb3VuZCAke2h0bWxGaWxlcy5sZW5ndGh9IEhUTUwgZmlsZXNgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXR1cyA9ICdJTl9QUk9HUkVTUyc7XG4gICAgICAgIGNvbnNvbGUubG9nKGBKb2IgJHtqb2JJZH0gaW4gcHJvZ3Jlc3MgLSBmb3VuZCAke2ZpbGVzRm91bmQubGVuZ3RofSBmaWxlcyBidXQgbm8gSFRNTCB5ZXRgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdHVzID0gJ0lOX1BST0dSRVNTJztcbiAgICAgIGNvbnNvbGUubG9nKGBKb2IgJHtqb2JJZH0gaW4gcHJvZ3Jlc3MgLSBubyBvdXRwdXQgZmlsZXMgZm91bmQgeWV0YCk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJldHVybiBzdGF0dXMgcmVzcG9uc2VcbiAgICByZXR1cm4ge1xuICAgICAgam9iSWQsXG4gICAgICBzdGF0dXMsXG4gICAgICBvdXRwdXRMb2NhdGlvbjogYHMzOi8vJHtvdXRwdXRCdWNrZXR9LyR7am9iT3V0cHV0UHJlZml4fWAsXG4gICAgICBmaWxlc0ZvdW5kXG4gICAgfTtcbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcik7XG4gICAgY29uc3Qgam9iSWQgPSBldmVudC5qb2JJZCB8fCAndW5rbm93bic7XG4gICAgY29uc29sZS5sb2coYEVycm9yIGNoZWNraW5nIHN0YXR1cyBmb3Igam9iICR7am9iSWR9OiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgICBcbiAgICAvLyBSZXR1cm4gZXJyb3IgcmVzcG9uc2VcbiAgICByZXR1cm4ge1xuICAgICAgam9iSWQsXG4gICAgICBzdGF0dXM6ICdGQUlMRUQnLFxuICAgICAgZXJyb3I6IGVycm9yTWVzc2FnZSxcbiAgICAgIG91dHB1dExvY2F0aW9uOiBgczM6Ly8ke2V2ZW50Lm91dHB1dFMzQnVja2V0fS8ke2V2ZW50Lm91dHB1dFMzUHJlZml4IHx8ICdjb252ZXJ0ZWQvJ30ke2pvYklkfS9gXG4gICAgfTtcbiAgfVxufTsiXX0=